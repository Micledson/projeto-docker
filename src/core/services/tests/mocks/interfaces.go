// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces/adapters/todo.go

// Package mock_adapters is a generated GoMock package.
package mock_adapters

import (
	errors "projeto-docker/src/core/domain/errors"
	todo "projeto-docker/src/core/domain/todo"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockTodoAdapter is a mock of TodoAdapter interface.
type MockTodoAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockTodoAdapterMockRecorder
}

// MockTodoAdapterMockRecorder is the mock recorder for MockTodoAdapter.
type MockTodoAdapterMockRecorder struct {
	mock *MockTodoAdapter
}

// NewMockTodoAdapter creates a new mock instance.
func NewMockTodoAdapter(ctrl *gomock.Controller) *MockTodoAdapter {
	mock := &MockTodoAdapter{ctrl: ctrl}
	mock.recorder = &MockTodoAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTodoAdapter) EXPECT() *MockTodoAdapterMockRecorder {
	return m.recorder
}

// ChangeStatus mocks base method.
func (m *MockTodoAdapter) ChangeStatus(arg0 todo.Todo) errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeStatus", arg0)
	ret0, _ := ret[0].(errors.Error)
	return ret0
}

// ChangeStatus indicates an expected call of ChangeStatus.
func (mr *MockTodoAdapterMockRecorder) ChangeStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeStatus", reflect.TypeOf((*MockTodoAdapter)(nil).ChangeStatus), arg0)
}

// FetchByID mocks base method.
func (m *MockTodoAdapter) FetchByID(arg0 uuid.UUID) (todo.Todo, errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchByID", arg0)
	ret0, _ := ret[0].(todo.Todo)
	ret1, _ := ret[1].(errors.Error)
	return ret0, ret1
}

// FetchByID indicates an expected call of FetchByID.
func (mr *MockTodoAdapterMockRecorder) FetchByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchByID", reflect.TypeOf((*MockTodoAdapter)(nil).FetchByID), arg0)
}

// Insert mocks base method.
func (m *MockTodoAdapter) Insert(arg0 todo.Todo) (todo.Todo, errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0)
	ret0, _ := ret[0].(todo.Todo)
	ret1, _ := ret[1].(errors.Error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockTodoAdapterMockRecorder) Insert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockTodoAdapter)(nil).Insert), arg0)
}

// List mocks base method.
func (m *MockTodoAdapter) List() ([]todo.Todo, errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]todo.Todo)
	ret1, _ := ret[1].(errors.Error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockTodoAdapterMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockTodoAdapter)(nil).List))
}

// Update mocks base method.
func (m *MockTodoAdapter) Update(arg0 uuid.UUID, arg1 todo.Todo) errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(errors.Error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockTodoAdapterMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTodoAdapter)(nil).Update), arg0, arg1)
}
