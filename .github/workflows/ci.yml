name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: 'Build and Push'
    runs-on: ${{ matrix.os }}
    outputs:
      docker_tag: ${{ steps.generate_tag.outputs.sha }}

    strategy:
      matrix:
        go-version: [1.23.2]
        os: [ubuntu-latest]

    steps:
      - name: Checkout do código-fonte
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.23.2
          
      - name: Verificar versão do Go
        run: go version

      - name: Baixar dependências
        run: go mod tidy

      - name: Build da aplicação
        run: go build ./...

      - name: Run Tests
        run: go test ./...

      - name: Gerar Tag
        id: generate_tag
        run: |
          SHA=$(echo $GITHUB_SHA | head -c7)
          echo "sha=$SHA" >> $GITHUB_OUTPUT


      - name: Login no Container Registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build da imagem Docker API
        run: |
          docker build -t mcsl9/projeto-docker-api:${{ steps.generate_tag.outputs.sha }} \
            -f .docker/development/Dockerfile.api .
        
      - name: Build da imagem Docker DATABASE
        run: |
          docker build -t mcsl9/projeto-docker-database:${{ steps.generate_tag.outputs.sha }} \
            -f .docker/development/Dockerfile.postgres .

      - name: Push da imagem Docker API para o DockerHub
        run: docker push mcsl9/projeto-docker-api:${{ steps.generate_tag.outputs.sha }}

      - name: Push da imagem Docker DATABASE para o DockerHub
        run: docker push mcsl9/projeto-docker-database:${{ steps.generate_tag.outputs.sha }}

  deploy:
    name: 'Deploy to Render'
    runs-on: ubuntu-latest
    needs: build
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create .env file
        run: echo "${{ secrets.ENV_FILE }}" > .env

      - name: Parse .env variables
        id: parse-env
        run: |
          python - <<EOF
          import os
          import json
          
          env_vars = []
          with open('.env', 'r') as f:
              for line in f:
                  line = line.strip()
                  if line and not line.startswith('#') and '=' in line:
                      key, value = line.split('=', 1)
                      env_vars.append({'key': key.strip(), 'value': value.strip()})
          
          with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
              print(f'env_vars={json.dumps(env_vars)}', file=fh)
          EOF

      - name: Deploy API to Render
        run: |
          curl -X PATCH \
            -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{
              "serviceDetails": {
                "image": "mcsl9/projeto-docker-api:${{ needs.build.outputs.docker_tag }}",
                "envVars": ${{ steps.parse-env.outputs.env_vars }}
              }
            }' \
            "https://api.render.com/v1/services/${{ secrets.RENDER_API_SERVICE_ID }}"

      - name: Deploy Database to Render
        run: |
          curl -X PATCH \
            -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{
              "serviceDetails": {
                "image": "mcsl9/projeto-docker-database:${{ needs.build.outputs.docker_tag }}",
                "envVars": ${{ steps.parse-env.outputs.env_vars }}
              }
            }' \
            "https://api.render.com/v1/services/${{ secrets.RENDER_DB_SERVICE_ID }}"
